---
import { Image } from "astro:assets";

interface Props {
  source: string;
  columns?: number;
  style?: "masonry" | "grid";
  viewer?: boolean;
}

const { source, columns = 3, style = "masonry", viewer = true } = Astro.props;

// Get all images from the specified directory
const images = import.meta.glob("/src/assets/**/*.{png,jpg,jpeg,webp,gif}", {
  eager: true,
});

// Filter images that match the source path
const sourceImages = Object.entries(images)
  .filter(([path]) =>
    path.includes(source.replace("../../assets/", "/src/assets/"))
  )
  .map(([path, module], index) => ({
    path,
    image: (module as any).default,
    filename: path.split("/").pop()?.split(".")[0] || "image",
    index,
  }))
  .sort((a, b) => a.filename.localeCompare(b.filename));

// Generate unique gallery ID for this instance
const galleryId = `gallery-${Math.random().toString(36).substr(2, 9)}`;
---

{
  sourceImages.length > 0 ? (
    <div class="gallery-wrapper my-8">
      <div
        id={galleryId}
        class={`gallery-container ${style === "masonry" ? "masonry-layout" : "grid-layout"}`}
        style={
          style === "masonry"
            ? `columns: ${columns}; column-gap: 1rem;`
            : `display: grid; grid-template-columns: repeat(auto-fit, minmax(${Math.floor(300 / columns)}px, 1fr)); gap: 1rem;`
        }
      >
        {sourceImages.map(({ image, filename, index }) => (
          <a
            href={image.src}
            class={`gallery-item ${viewer ? "cursor-pointer" : ""} ${style === "masonry" ? "masonry-item" : "grid-item"}`}
            data-pswp-width={image.width || 800}
            data-pswp-height={image.height || 600}
            data-index={index}
          >
            <div class="image-wrapper overflow-hidden rounded-sm shadow-md hover:shadow-lg transition-all duration-300 mb-4">
              <Image
                src={image}
                alt={`Gallery image: ${filename.replace(/[-_]/g, " ")}`}
                class={`w-full ${style === "grid" ? "h-64 object-cover" : "h-auto"} hover:scale-105 transition-transform duration-300`}
                loading="lazy"
                format="webp"
              />
            </div>
          </a>
        ))}
      </div>
    </div>
  ) : (
    <div class="gallery-error p-4 bg-yellow-50 border border-yellow-200 rounded-lg my-8">
      <p class="text-yellow-800">
        No images found in:{" "}
        <code class="bg-yellow-100 px-2 py-1 rounded">{source}</code>
      </p>
    </div>
  )
}

<style>
  .masonry-layout {
    column-fill: balance;
  }

  .masonry-item {
    break-inside: avoid;
    display: inline-block;
    width: 100%;
  }

  .grid-layout {
    display: grid;
  }

  .grid-item {
    display: block;
  }

  /* Responsive columns for masonry */
  @media (max-width: 640px) {
    .masonry-layout {
      columns: 1 !important;
    }
  }

  @media (min-width: 641px) and (max-width: 1024px) {
    .masonry-layout {
      columns: 2 !important;
    }
  }
</style>

<script>
  import PhotoSwipeLightbox from "photoswipe/lightbox";
  import "photoswipe/style.css";

  document.addEventListener("DOMContentLoaded", function () {
    // Get all gallery containers
    const galleries = document.querySelectorAll(".gallery-container");

    galleries.forEach((gallery) => {
      const galleryId = gallery.id;
      const items = gallery.querySelectorAll(".gallery-item");

      if (!items.length) return;

      // Create PhotoSwipe lightbox
      const lightbox = new PhotoSwipeLightbox({
        gallery: `#${galleryId}`,
        children: "a.gallery-item",
        pswpModule: () => import("photoswipe"),

        // PhotoSwipe options
        bgOpacity: 0.9,
        showHideAnimationType: "zoom",

        // Enable mouse wheel zoom
        mouseMovePan: true,

        // Close on click outside
        tapAction: "close",
        doubleTapAction: "zoom",

        // Animation duration
        showAnimationDuration: 300,
        hideAnimationDuration: 200,
      });

      // Initialize the lightbox
      lightbox.init();
    });
  });
</script>
